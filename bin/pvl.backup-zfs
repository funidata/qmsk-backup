#!/usr/bin/python3

"""
    Manage ZFS snapshots from rsync sources.

    sudo ./opt/bin/pvl.backup-zfs -v tank/backup/test \
            --rsync-source=lvm:test/test \
            --snapshot '5@%Y%m%d-%H%M%S' \
            --snapshot '5@%Y%m%d' \
            --snapshot '5@%Y%m' \
            --snapshot '5@%Y' \
            --purge 

"""

import datetime
import logging
import pvl.args
import pvl.backup.rsync
import pvl.backup.zfs
import pvl.invoke

from pvl.backup import __version__

log = logging.getLogger('pvl.backup-zfs')

class Error (Exception):
    pass

class Interval (object):
    @classmethod
    def config (cls, interval):
        if '@' in interval:
            limit, interval = interval.split('@', 1)
            limit = int(limit)
        else:
            limit = None

        strftime = interval

        return cls(strftime,
                limit   = limit,
        )

    def __init__ (self, strftime, limit=None):
        self.strftime = strftime
        self.limit = limit

    def __str__(self):
        if self.limit:
            return "{self.limit}@{self.strftime}".format(self=self)
        else:
            return "{self.strftime}".format(self=self)

    def format(self, now):
        return now.strftime(self.strftime)

    def match(self, name):
        """
            Returns True if the given snapshot name matches our format.
        """

        try:
            datetime.datetime.strptime(name, self.strftime)
        except ValueError:
            return False
        else:
            return True

class Target (object):
    # rsync options, in invoke.optargs format
    RSYNC_OPTIONS = {
        'archive':          True,
        'hard-links':       True,
        'one-file-system':  True,
        'numeric-ids':      True,
        'delete':           True,
    }
    
    @classmethod
    def config(cls,
            rsync_source=None,
            rsync_options=None,
            **opts
    ):
        """
            Parse rsync options from list.
        """

        if rsync_source:
            try:
                rsync_source    = pvl.backup.rsync.parse_source(rsync_source)
            except pvl.backup.rsync.SourceError as error:
                raise Error("--source=%s: %s", source, error)
       
        _rsync_options = dict(cls.RSYNC_OPTIONS)

        if rsync_options:
            for opt in rsync_options:
                if '=' in opt:
                    opt, value = opt.split('=', 1)
                else:
                    value = True
                
                # update
                if value is True:
                    _rsync_options[opt] = value
                elif value:
                    _rsync_options.setdefault(opt, []).append(value)
                else:
                    del _rsync_options[opt]

        return cls(
                rsync_source    = rsync_source,
                rsync_options   = _rsync_options,
                **opts
        )

    def __init__(self,
            rsync_source    = None,
            rsync_options   = [],
            intervals       = [],
    ):
        self.rsync_source = rsync_source
        self.rsync_options = rsync_options
        self.intervals = intervals

    def mount(self):
        """
            Return backup destination path.
        """

        abstract

    def rsync (self, dest_path):
        """
            rsync source to given dest.

            Raises pvl.backup.rsync.Error
        """
        
        rsync_options = pvl.invoke.optargs(**self.rsync_options)

        try:
            # run the rsync.RSyncServer; None as a placeholder will get replaced with the actual source
            self.rsync_source.rsync(rsync_options, dest_path)

        except pvl.backup.rsync.Error as error:
            log.warn("%s rsync error: %s", self, error)
            raise

class ZFSTarget (Target):
    """
        ZFS rsync snapshot management
    """
        
    @classmethod
    def config (cls, name,
            noop        = None,
            **opts
    ):
        return super(ZFSTarget, cls).config(
                zfs             = pvl.backup.zfs.Filesystem(name, noop=noop),
                **opts
        )

    def __init__ (self, zfs, **opts):
        super(ZFSTarget, self).__init__(**opts)

        self.zfs = zfs

    def __str__ (self):
        return str(self.zfs)

    def setup (self, create=False, verify_source=None, force_source=False):
        """
            Verify that the ZFS volume exists.
        """
                
        get_error = None
        zfs_source = {}

        try:
            zfs_source = self.zfs.get('pvl-backup:source')
        except pvl.backup.zfs.Error as error:
            get_error = error

        log.debug("%s setup: get_error=%s, zfs_source=%s", self, get_error, zfs_source)
        
        if get_error:
            if create:
                props = {'pvl-backup:source': verify_source}

                # assume error is caused by missing fs
                log.warning("%s: create volume with %s", self, props)

                self.zfs.create(props)

            else:
                raise get_error

        elif verify_source and zfs_source != verify_source:
            if force_source:
                log.warning("%s: update pvl-backup:source: %s from %s", self, force_source, zfs_source)

                self.zfs.set('pvl-backup:source', force_source)

            else:
                raise Error("ZFS %s property pvl-backup.source=%s mismatch, should be %s" % (self, zfs_source, verify_source))

        else:
            # ok
            pass

    def mount(self):
        """
            Return backup destination path.
        """

        mountpoint = self.zfs.mountpoint

        if not mountpoint:
            raise Error("ZFS destination is not mounted: %s", self.zfs)

        return mountpoint
        
    def purge_interval(self, interval):
        """
            Purge snapshots for interval
        """

        snapshots = [snapshot for snapshot_name, snapshot in self.zfs.snapshots.items() if interval.match(snapshot_name)]
        snapshots.sort(key=lambda s: s.name, reverse=True) # from highest down

        log.debug("%s purge interval=%s: snapshots=%s", self, interval, snapshots)

        for purge_snapshot in snapshots[interval.limit:]:
            log.info("%s: purge %s", self, purge_snapshot)

            purge_snapshot.destroy()

    def backup (self):
        """
            Run backup, managing snapshots.
        """

        # start
        now = datetime.datetime.now()

        log.info("%s: backup %s", self, now)

        if self.rsync_source:
            # activate destination
            dest_path = self.mount()
            
            log.info("%s: rsync %s", self, dest_path)
        
            rsync_path = self.rsync(dest_path)

        # create new snapshots
        for interval in self.intervals:
            snapshot_name = interval.format(now)
            
            if snapshot_name not in self.zfs.snapshots:
                log.info("%s: snapshot %s: %s", self, interval, snapshot_name)

                self.zfs.snapshot(snapshot_name)

    def purge(self):
        """
            Purge any extra snapshots
        """

        for interval in self.intervals:
            if interval.limit:
                self.purge_interval(interval)

def main (args):
    parser = pvl.args.parser(package='backup', module='zfs',
            description = __doc__,
            version     = __version__,
    )

    parser.add_argument('-n', '--noop', action='store_true',
            help="No-op")

    parser.add_argument('--setup-create', action='store_true',
            help="Create new ZFS backup filesystem")

    parser.add_argument('--force-source', action='store_true',
            help="Update ZFS rsync source")
    parser.add_argument('--rsync-source', metavar='RSYNC-SOURCE',
            help="Backup rsync source")
    parser.add_argument('--rsync-option', metavar='-option', action='append', dest='rsync_options', default=[],
            help="Pass rsync options")

    parser.add_argument('--snapshot', metavar='LIMIT@STRFTIME', action='append', dest='interval', default=[],
            help="Backup retention intervals")
    parser.add_argument('--purge', action='store_true',
            help="Purge old snapshots")

    parser.add_argument('target', metavar='ZFS', nargs='+',
            help="ZFS target")

    args = pvl.args.parse(parser, args)

    intervals = [Interval.config(interval) for interval in args.interval]

    for target in args.target:
        try:
            target = ZFSTarget.config(target,
                    rsync_source    = args.rsync_source,
                    rsync_options   = args.rsync_options,
                    intervals       = intervals,
                    noop            = args.noop
            )
        except Error as error:
            log.error("%s: %s", target, error)
            return 1

        try:
            target.setup(
                    create          = args.setup_create,
                    verify_source   = str(target.rsync_source),
                    force_source    = str(target.rsync_source) if args.force_source else None,
            )
 
            target.backup()

            # purge intervals
            if args.purge:
                target.purge()

        except Error as error:
            log.exception("%s: %s", target, error)
            return 2

    return 0
    
if __name__ == '__main__':
    pvl.args.main(main)
