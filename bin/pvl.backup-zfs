#!/usr/bin/python

"""
    Manage ZFS snapshots from rsync sources
"""

import datetime
import logging
import optparse
import pvl.args
import pvl.backup.invoke
import pvl.backup.rsync
import pvl.backup.zfs

from pvl.backup import __version__

log = logging.getLogger('pvl.backup-zfs')

class Error (Exception):
    pass

class Interval (object):
    @classmethod
    def config (cls, interval):
        if '@' in interval:
            limit, interval = interval.split('@', 1)
            limit = int(limit)
        else:
            limit = None

        strftime = interval

        return cls(strftime,
                limit   = limit,
        )

    def __init__ (self, strftime, limit=None):
        self.strftime = strftime
        self.limit = limit

    def format(self, now):
        return now.strftime(self.strftime)

class Target (object):
    # rsync options, in invoke.optargs format
    rsync_options = {
        'archive':          True,
        'hard-links':       True,
        'one-file-system':  True,
        'numeric-ids':      True,
        'delete':           True,
    }

    def rsync (self, dest):
        """
            rsync source to given dest.

            Raises pvl.backup.rsync.Error
        """
        
        rsync_options = pvl.backup.invoke.optargs(**self.rsync_options)

        try:
            # run the rsync.RSyncServer; None as a placeholder will get replaced with the actual source
            self.rsync_source.rsync(rsync_options, dest)

        except pvl.backup.rsync.Error as error:
            log.warn("%s rsync error: %s", self, error)
            raise

        return dest

class ZFSTarget (Target):
    """
        ZFS rsync snapshot management
    """
        
    @classmethod
    def config (cls, name,
            source,
            **opts
    ):
        try:
            rsync_source    = pvl.backup.rsync.parse_source(source)
        except pvl.backup.rsync.SourceError as error:
            raise Error("--source=%s: %s", source, error)

        return cls(pvl.backup.zfs.Filesystem(name),
                rsync_source    = rsync_source,
                **opts
        )

    def __init__ (self, zfs, rsync_source, intervals=[]):
        if not zfs.exists:
            raise Error("No such ZFS: {zfs}".format(zfs=zfs))

        self.zfs = zfs
        self.rsync_source = rsync_source
        self.intervals = intervals

        self.zfs_snapshots = {snapshot.name: snapshot for snapshot in zfs.list_snapshots()}

    def __str__ (self):
        return str(self.zfs)

    def rsync (self):
        """
            Update backup.

            Raises Error.
        """
        
        mountpoint = self.zfs.mountpoint

        if not mountpoint:
            raise Error("ZFS destination is not mounted: %s", self.zfs)
        
        # update the zfs contents using rsync
        return super(ZFSTarget, self).rsync(dest=mountpoint)

    def snapshot_interval(self, snapshot_name):
        """
            Snapshot for interval
        """
        
        if snapshot_name in self.zfs_snapshots:
            # already exists
            return None

        snapshot = self.zfs_snapshots[snapshot_name] = self.zfs.snapshot(snapshot_name)

        return snapshot

    def backup (self):
        """
            Run backup, managing snapshots.
        """

        now = datetime.datetime.now()

        log.info("%s: backup %s", self, now)

        rsync_path = self.rsync()
        
        log.info("%s: rsync %s", self, rsync_path)

        # intervals
        for interval in self.intervals:
            interval_snapshot = interval.format(now)

            snapshot = self.snapshot_interval(interval_snapshot)
        
            if snapshot:
                log.info("%s@%s: snapshot %s", self, interval_snapshot, snapshot)

def main (argv):
    parser = optparse.OptionParser()
    parser.add_option_group(pvl.args.parser(parser))

    parser.add_option('--source',
            help="Backup source")
    parser.add_option('--snapshot', metavar='[LIMIT@]STRFTIME', action='append', dest='interval', default=[],
            help="Backup retention intervals")

    options, args = pvl.args.parse(parser, argv, package='backup', module='zfs')

    intervals = [Interval.config(interval) for interval in options.interval]

    for target in args:
        try:
            target = ZFSTarget.config(target,
                    source      = options.source,
                    intervals   = intervals,
            )
        except Error as error:
            log.error("%s: %s", target, error)
            return 1

        try:
            target.backup()
        except Error as error:
            log.exception("%s: %s", target, error)
            return 2

    return 0
    
if __name__ == '__main__':
    pvl.args.main(main)
