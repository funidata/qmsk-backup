#!/usr/bin/python

"""
    Manage ZFS snapshots from rsync sources.

    sudo ./opt/bin/pvl.backup-zfs -v tank/backup/test \
            --source=/home/terom/dev/pvl-backup/mnt/ \
            --snapshot '5@%Y%m%d-%H%M%S' \
            --snapshot '5@%Y%m%d' \
            --snapshot '5@%Y%m' \
            --snapshot '5@%Y' \
            --purge 

"""

import datetime
import logging
import optparse
import pvl.args
import pvl.backup.invoke
import pvl.backup.rsync
import pvl.backup.zfs

from pvl.backup import __version__

log = logging.getLogger('pvl.backup-zfs')

class Error (Exception):
    pass

class Interval (object):
    @classmethod
    def config (cls, interval):
        if '@' in interval:
            limit, interval = interval.split('@', 1)
            limit = int(limit)
        else:
            limit = None

        strftime = interval

        return cls(strftime,
                limit   = limit,
        )

    def __init__ (self, strftime, limit=None):
        self.strftime = strftime
        self.limit = limit

    def __str__(self):
        if self.limit:
            return "{self.limit}@{self.strftime}".format(self=self)
        else:
            return "{self.strftime}".format(self=self)

    def format(self, now):
        return now.strftime(self.strftime)

    def match(self, name):
        """
            Returns True if the given snapshot name matches our format.
        """

        try:
            datetime.datetime.strptime(name, self.strftime)
        except ValueError:
            return False
        else:
            return True

class Target (object):
    # rsync options, in invoke.optargs format
    rsync_options = {
        'archive':          True,
        'hard-links':       True,
        'one-file-system':  True,
        'numeric-ids':      True,
        'delete':           True,
    }

    def rsync (self, dest):
        """
            rsync source to given dest.

            Raises pvl.backup.rsync.Error
        """
        
        rsync_options = pvl.backup.invoke.optargs(**self.rsync_options)

        try:
            # run the rsync.RSyncServer; None as a placeholder will get replaced with the actual source
            self.rsync_source.rsync(rsync_options, dest)

        except pvl.backup.rsync.Error as error:
            log.warn("%s rsync error: %s", self, error)
            raise

        return dest

class ZFSTarget (Target):
    """
        ZFS rsync snapshot management
    """
        
    @classmethod
    def config (cls, name,
            rsync_source=None,
            **opts
    ):
        if rsync_source:
            try:
                rsync_source    = pvl.backup.rsync.parse_source(rsync_source)
            except pvl.backup.rsync.SourceError as error:
                raise Error("--source=%s: %s", source, error)

        return cls(pvl.backup.zfs.Filesystem(name),
                rsync_source    = rsync_source,
                **opts
        )

    def __init__ (self, zfs,
            rsync_source    = None,
            intervals       = [],
    ):
        self.zfs = zfs
        self.rsync_source = rsync_source
        self.intervals = intervals

    def __str__ (self):
        return str(self.zfs)

    def setup (self, create=False, verify_source=None, force_source=False):
        """
            Verify that the ZFS volume exists.
        """
                
        get_error = None
        zfs_source = {}

        try:
            zfs_source = self.zfs.get('pvl-backup:source')
        except pvl.backup.zfs.Error as error:
            get_error = error

        log.debug("%s setup: get_error=%s, zfs_source=%s", self, get_error, zfs_source)
        
        if get_error:
            if create:
                props = {'pvl-backup:source': verify_source}

                # assume error is caused by missing fs
                log.warning("%s: create volume with %s", self, props)

                self.zfs.create(props)

            else:
                raise get_error

        elif verify_source and zfs_source != verify_source:
            if force_source:
                log.warning("%s: update pvl-backup:source: %s from %s", self, force_source, zfs_source)

                self.zfs.set('pvl-backup:source', force_source)

            else:
                raise Error("ZFS %s property pvl-backup.source=%s mismatch, should be %s" % (self, zfs_source, verify_source))

        else:
            # ok
            pass

    def rsync (self):
        """
            Update backup.

            Raises Error.
        """
        
        mountpoint = self.zfs.mountpoint

        if not mountpoint:
            raise Error("ZFS destination is not mounted: %s", self.zfs)
        
        # update the zfs contents using rsync
        return super(ZFSTarget, self).rsync(dest=mountpoint)

    def purge_interval(self, options, interval, zfs_snapshots):
        """
            Purge snapshots for interval
        """

        snapshots = [snapshot for snapshot_name, snapshot in zfs_snapshots.iteritems() if interval.match(snapshot_name)]
        snapshots.sort(reverse=True) # from highest down

        log.debug("%s purge interval=%s: snapshots=%s", self, interval, snapshots)

        for purge_snapshot in snapshots[interval.limit:]:
            if options.noop:
                log.warn("%s: --noop purge %s", self, purge_snapshot)
            else:
                log.info("%s: purge %s", self, purge_snapshot)
                purge_snapshot.destroy()

    def backup (self, options):
        """
            Run backup, managing snapshots.
        """

        self.setup(
                create          = options.setup_create,
                verify_source   = str(self.rsync_source),
                force_source    = str(self.rsync_source) if options.force_source else None,
        )
        
        # track existing snapshots for create and purge
        zfs_snapshots = {snapshot.name: snapshot for snapshot in self.zfs.list_snapshots()}
        
        # start
        now = datetime.datetime.now()

        log.info("%s: backup %s", self, now)

        if self.rsync_source:
            rsync_path = self.rsync()
            
            log.info("%s: rsync %s", self, rsync_path)

        # create new snapshots
        for interval in self.intervals:
            snapshot_name = interval.format(now)
            
            if snapshot_name not in zfs_snapshots:
                log.info("%s: snapshot %s: %s", self, interval, snapshot_name)

                zfs_snapshots[snapshot_name] = self.zfs.snapshot(snapshot_name)

        # purge intervals
        if options.purge:
            for interval in self.intervals:
                if interval.limit:
                    self.purge_interval(options, interval, zfs_snapshots)

def main (argv):
    parser = optparse.OptionParser()
    parser.add_option_group(pvl.args.parser(parser))

    parser.add_option('-n', '--noop', action='store_true',
            help="No-op")

    parser.add_option('--setup-create', action='store_true',
            help="Create new ZFS backup filesystem")
    parser.add_option('--force-source', action='store_true',
            help="Update ZFS rsync source")

    parser.add_option('--rsync-source', metavar='RSYNC-SOURCE',
            help="Backup rsync source")
    parser.add_option('--snapshot', metavar='[LIMIT@]STRFTIME', action='append', dest='interval', default=[],
            help="Backup retention intervals")
    parser.add_option('--purge', action='store_true',
            help="Purge old snapshots")

    options, args = pvl.args.parse(parser, argv, package='backup', module='zfs')

    intervals = [Interval.config(interval) for interval in options.interval]

    for target in args:
        try:
            target = ZFSTarget.config(target,
                    rsync_source    = options.rsync_source,
                    intervals       = intervals,
            )
        except Error as error:
            log.error("%s: %s", target, error)
            return 1

        try:
            target.backup(options)
        except Error as error:
            log.exception("%s: %s", target, error)
            return 2

    return 0
    
if __name__ == '__main__':
    pvl.args.main(main)
