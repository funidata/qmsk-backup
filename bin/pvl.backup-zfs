#!/usr/bin/python3

"""
    Manage ZFS snapshots from rsync sources.

    sudo ./opt/bin/pvl.backup-zfs -v tank/backup/test \
            --rsync-source=lvm:test/test \
            --snapshot '5@%Y%m%d-%H%M%S' \
            --snapshot '5@%Y%m%d' \
            --snapshot '5@%Y%m' \
            --snapshot '5@%Y' \
            --purge 

"""

import datetime
import logging
import pvl.args
import pvl.backup.zfs
import pvl.invoke

from pvl.backup import __version__
from pvl.backup.target import Error, Interval, BaseTarget

log = logging.getLogger('pvl.backup-zfs')

class ZFSTarget (BaseTarget):
    """
        ZFS rsync snapshot management
    """
        
    @classmethod
    def config (cls, name,
            noop        = None,
            **opts
    ):
        return super(ZFSTarget, cls).config(
                zfs             = pvl.backup.zfs.Filesystem(name, noop=noop),
                **opts
        )

    def __init__ (self, zfs, **opts):
        super(ZFSTarget, self).__init__(**opts)

        self.zfs = zfs

    def __str__ (self):
        return str(self.zfs)

    def setup (self, create=False, verify_source=None, force_source=False):
        """
            Verify that the ZFS volume exists.
        """
                
        get_error = None
        zfs_source = {}

        try:
            zfs_source = self.zfs.get('pvl-backup:source')
        except pvl.backup.zfs.Error as error:
            get_error = error

        log.debug("%s setup: get_error=%s, zfs_source=%s", self, get_error, zfs_source)
        
        if get_error:
            if create:
                props = {'pvl-backup:source': verify_source}

                # assume error is caused by missing fs
                log.warning("%s: create volume with %s", self, props)

                self.zfs.create(props)

            else:
                raise get_error

        elif verify_source and zfs_source != verify_source:
            if force_source:
                log.warning("%s: update pvl-backup:source: %s from %s", self, force_source, zfs_source)

                self.zfs.set('pvl-backup:source', force_source)

            else:
                raise Error("ZFS %s property pvl-backup.source=%s mismatch, should be %s" % (self, zfs_source, verify_source))

        else:
            # ok
            pass

    def mount(self):
        """
            Return backup destination path.
        """

        mountpoint = self.zfs.mountpoint

        if not mountpoint:
            raise Error("ZFS destination is not mounted: %s", self.zfs)

        return mountpoint

    def snapshot (self, now):
        """
            Create new ZFS snapshot for given timestamp.

            Returns pvl.backup.zfs.Snapshot
        """

        snapshot_name = now.strftime(self.SNAPSHOT_STRFTIME)

        if self.rsync_source:
            # activate destination
            dest_path = self.mount()
            
            log.info("%s: rsync %s", self, dest_path)
        
            rsync_stats = self.rsync(dest_path)
        
        log.info("%s: snapshot %s", self, snapshot_name)
                
        return self.zfs.snapshot(snapshot_name, {
            'pvl-backup:snapshot':  snapshot_name,
            'pvl-backup:source':    str(self.rsync_source),
        })
    
    def backup_interval (self, interval, now, snapshot):
        """
            Manage interval holds for snapshot.
        """

        interval_hold = '{interval}/{timestamp}'.format(interval=interval.name, timestamp=interval.format(now))

        log.info("%s: hold %s @ %s = %s", self, snapshot, interval.name, interval_hold)

        snapshot.hold(interval_hold)

    def backup (self):
        """
            Run backup, managing snapshots.
        """

        # start
        now = datetime.datetime.now()

        log.info("%s: backup %s", self, now)

        snapshot = self.snapshot(now)

        # manage intervals
        for interval in self.intervals:
            self.backup_interval(interval, now, snapshot)

    def purge_interval(self, interval, snapshot_holds):
        """
            Purge snapshots for interval
        """

        # release duplicated snapshots for each interval period
        interval_snapshots = { }

        for snapshot, hold in sorted(snapshot_holds, key=lambda t: t[0].name, reverse=True): # newest first
            newer_snapshot = interval_snapshots.get(hold)

            if newer_snapshot:
                log.info("%s: release %s @ %s: deprecated by %s", self, snapshot, hold, newer_snapshot)
            
                snapshot.release(hold)
            else:
                interval_snapshots[hold] = snapshot

        # release oldest snapshots for each interval period
        hold_snapshots = sorted(interval_snapshots.items(), key=lambda kv: kv[1].name, reverse=True) # newest first
        
        log.debug("%s purge interval=%s limit=%d snapshots=%d", self, interval.name, interval.limit, len(hold_snapshots))

        for hold, snapshot in hold_snapshots[interval.limit:]:
            log.info("%s: release %s @ %s", self, snapshot, hold)
            
            snapshot.release(hold)

    def purge_snapshots(self):
        """
            Purge any un-held snapshots
        """

        for snapshot in self.zfs.list_snapshots('pvl-backup:snapshot'):
            if not snapshot['pvl-backup:snapshot']:
                log.debug("%s: skip %s: not a snapshot", self, snapshot)
                continue
            
            if snapshot.userrefs > 0:
                log.debug("%s: skip %s: still referenced: %d", self, snapshot, snapshot.userrefs)
                continue

            log.info("%s: purge %s", self, snapshot)

            snapshot.destroy()

    def purge(self):
        """
            Purge any extra snapshots
        """
        
        # collect { Interval.name: [(Snapshot, hold_tag)] }
        interval_snapshot_holds = {}

        for snapshot, hold in self.zfs.holds():
            try:
                interval_name, fmt = hold.split('/')
            except ValueError as error:
                log.warn("%s: unknown snapshot %s hold %s: %s", self, snapshot, hold, error)
                continue

            log.debug("%s: map snapshot %s hold %s -> interval %s", self, snapshot, hold, interval_name)

            interval_snapshot_holds.setdefault(interval_name, []).append((snapshot, hold))
        
        # release snapshots per limits
        for interval in self.intervals:
            if interval.limit:
                snapshots = interval_snapshot_holds.get(interval.name, [])

                self.purge_interval(interval, snapshots)
        
        # destroy released snapshots
        self.purge_snapshots()

def main (args):
    parser = pvl.args.parser(package='backup', module='zfs',
            description = __doc__,
            version     = __version__,
    )

    parser.add_argument('-n', '--noop', action='store_true',
            help="No-op")

    parser.add_argument('--setup-create', action='store_true',
            help="Create new ZFS backup filesystem")

    parser.add_argument('--force-source', action='store_true',
            help="Update ZFS rsync source")
    parser.add_argument('--rsync-source', metavar='RSYNC-SOURCE',
            help="Backup rsync source")
    parser.add_argument('--rsync-option', metavar='-option', action='append', dest='rsync_options', default=[],
            help="Pass rsync options")

    parser.add_argument('--interval', metavar=Interval.METAVAR, action='append', dest='intervals', type=Interval.config, default=[],
            help="Backup retention intervals")
    parser.add_argument('--purge', action='store_true',
            help="Purge old snapshots")

    parser.add_argument('target', metavar='ZFS', nargs='+',
            help="ZFS target")

    args = pvl.args.parse(parser, args)

    for target in args.target:
        try:
            target = ZFSTarget.config(target,
                    rsync_source    = args.rsync_source,
                    rsync_options   = args.rsync_options,
                    intervals       = args.intervals,
                    noop            = args.noop
            )
        except (Error, pvl.backup.zfs.Error) as error:
            log.error("%s: %s", target, error)
            return 1

        try:
            target.setup(
                    create          = args.setup_create,
                    verify_source   = str(target.rsync_source),
                    force_source    = str(target.rsync_source) if args.force_source else None,
            )
 
            target.backup()

            # purge intervals
            if args.purge:
                target.purge()

        except (Error, pvl.backup.zfs.Error) as error:
            log.exception("%s: %s", target, error)
            return 2

    return 0
    
if __name__ == '__main__':
    pvl.args.main(main)
