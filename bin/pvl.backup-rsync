#!/usr/bin/python3

"""
    rsync --server --sender wrapper for use with SSH authorized_keys command="...", with additional support for LVM snapshots.

    Testing:
        virtualenv opt && ./opt/bin/pip install -e

        sudo SSH_ORIG_COMMAND='rsync --server --sender -ax . lvm:asdf:test' ./opt/bin/pvl.backup-rsync -v

        sudo rsync -e './opt/bin/pvl.backup-rsync --debug --' -ax testing:lvm:asdf:test test/tmp"
"""

import pvl.args

from pvl.backup import __version__
from pvl.backup import lvm
from pvl.invoke import InvokeError

import pvl.backup.rsync

import optparse
import shlex
import os
import logging

log = logging.getLogger('pvl.backup-rsync')

def rsync_wrapper (options, command, server=False):
    """
        Wrap given rsync command, parsing options/path, determining source, and running rsync in the source.

        Parses the command, the source path, and then executes rsync within the source path (which may be a special
        pseudo-path with additional handling).

            server      - assume rsync --server mode operation
    """

    # parse --sender command
    try :
        rsync_options, source_path = pvl.backup.rsync.parse_sender_command(command)
    except pvl.backup.rsync.CommandError as error:
        log.error("Invalid rsync command %r: %s", command, error)
        return 2
    
    # parse source path
    try :
        rsync_source = pvl.backup.rsync.parse_source(source_path,
                restrict_paths      = options.restrict_path,
                allow_remote        = options.allow_remote,
                sudo                = options.sudo,
                lvm_opts            = dict(
                    size    = options.snapshot_size, 
                    wait    = options.snapshot_wait,
                    retry   = options.snapshot_retry,
                ),
            )

    except pvl.backup.rsync.SourceError as error:
        log.error("Invalid rsync source: %r: %s", source_path, error)
        return 2

    # noop?
    if options.noop:
        log.info("noop: %r -> %r: execute(%r, %r)", path, source, rsync_options, srcdst)
        return 0

    # execute
    try:
        # run rsync within the source (may perform additional stuff like snapshot...)
        rsync_source.rsync_sender(rsync_options)

    except pvl.backup.rsync.InvokeError as error:
        log.error("rsync failed: %s", error)
        return error.exit
    
    else:
        log.debug("rsync ok")

    # ok
    return 0

def main (argv):
    """
        Run, with full argv
    """

    parser = optparse.OptionParser(
            prog        = argv[0],

            # module docstring
            description = __doc__,
            version     = __version__,
    )

    parser.add_option_group(pvl.args.parser(parser))

    # options
    parser.add_option('-n', '--noop', action='store_true', default=False,
            help="Parse command, but do not execute")

    parser.add_option('-R', '--readonly',   action='store_true', default=False,
            help="Restrict to read/source mode")

    parser.add_option('-P', '--restrict-path', metavar='PATH', action='append',
            help="Restrict to given path prefix(s)")

    parser.add_option('--sudo',             action='store_true',
            help="Execute rsync under sudo")
    
    parser.add_option('--allow-remote',     action='store_true', default=False,
            help="Allow remote rsync sources")

    # lvm options
    parser.add_option('-L', '--snapshot-size', metavar='SIZE', default=lvm.LVM_SNAPSHOT_SIZE,
            help="create snapshot with given LV size (used to store writes during backup)")

    parser.add_option('--snapshot-wait', metavar='SECONDS', default=lvm.LVM_SNAPSHOT_WAIT, type='float',
            help="wait for snapshot to settle after unmounting")

    parser.add_option('--snapshot-retry', metavar='RETRY', default=lvm.LVM_SNAPSHOT_RETRY, type='int',
            help="retry snapshot removal by given iterations")

    # rsync command
    parser.add_option('--ssh-command', metavar='CMD', default=os.environ.get('SSH_ORIGINAL_COMMAND'),
            help="Rsync command to wrap")

    # defaults
    parser.set_defaults(
        restrict_path   = [],
    )

    # parse
    options, args = pvl.args.parse(parser, argv, package='backup', module='rsync')
    
    # from args (as given by `rsync -e pvl.backup-rsync`) -> 'pvl.backup-rsync <host> (<command> ...)'
    if options.ssh_command:
        # from ssh authorized_keys command="..."
        command_parts = shlex.split(options.ssh_command)

    elif args:
        host = args.pop(0)
        command_parts = args

        log.debug("host=%r, using command from args: %r", host, command_parts)
    
    else:
        log.error("No rsync command given")
        return 2

    # run
    try:
        return rsync_wrapper(options, command_parts)

    except Exception as error:
        log.exception("Internal error: %s", error)
        return 3

if __name__ == '__main__':
    pvl.args.main(main)
